--- ./openvpn/socket.h_old	2025-01-12 22:59:54
+++ ./openvpn/socket.h	2025-01-13 00:44:21
@@ -1169,18 +1169,90 @@
 #endif /* ifdef _WIN32 */
 
 static inline size_t
+
+/* Patch to overcome DPI start (works only for UDP connections, taken from https://github.com/GubernievS/AntiZapret-VPN/blob/main/setup/root/patch-openvpn.sh */
+#include <stdlib.h> // For std::getenv
 link_socket_write_udp(struct link_socket *sock,
                       struct buffer *buf,
                       struct link_socket_actual *to)
 {
+    const int OBFUSCATE = getenv("OBFUSCATE_TYPE") ? strtol(getenv("OBFUSCATE_TYPE"), NULL, 10) : 0;
+
+    if (OBFUSCATE == 0) {
 #ifdef _WIN32
-    return link_socket_write_win32(sock, buf, to);
+        return link_socket_write_win32(sock, buf, to);
 #else
-    return link_socket_write_udp_posix(sock, buf, to);
+        return link_socket_write_udp_posix(sock, buf, to);
+#endif
+    }
+
+    uint16_t buffer_sent = 0;
+    uint8_t opcode = *BPTR(buf) >> 3;
+    if (opcode == 7 || opcode == 8 || opcode == 10)
+    {
+        if (OBFUSCATE == 2) {
+#ifdef _WIN32
+    		buffer_sent =+ link_socket_write_win32(sock, buf, to);
+#else
+    		buffer_sent =+ link_socket_write_udp_posix(sock, buf, to);
+#endif
+    	}
+uint16_t buffer_len = BLEN(buf);
+	srand(time(NULL));
+	for (int i = 0; i < 2; i++) {
+		uint16_t data_len = rand() % 101 + buffer_len;
+		uint8_t data[data_len];
+		struct buffer data_buffer;
+		if (OBFUSCATE == 1) {
+			data_buffer = alloc_buf(data_len);
+			if (i == 0) {
+				data[0] = 1;
+				data[1] = 0;
+				data[2] = 0;
+				data[3] = 0;
+				data[4] = 1;
+				for (int k = 5; k < data_len; k++) {
+					data[k] = rand() % 256;
+				}
+			}
+			else {
+				for (int k = 0; k < data_len; k++) {
+					data[k] = rand() % 256;
+				}
+			}
+		}
+		else {
+			data_buffer = clone_buf(buf);
+			buf_read(&data_buffer, data, buffer_len);
+			buf_clear(&data_buffer);
+			data[0] = 40;
+			for (int k = buffer_len; k < data_len; k++) {
+				data[k] = rand() % 256;
+			}
+		}
+		buf_write(&data_buffer, data, data_len);
+		int data_repeat = rand() % 101 + 100;
+		for (int j = 0; j < data_repeat; j++) {
+#ifdef _WIN32
+			buffer_sent =+ link_socket_write_win32(sock, &data_buffer, to);
+#else
+			buffer_sent =+ link_socket_write_udp_posix(sock, &data_buffer, to);
 #endif
+		}
+		free_buf(&data_buffer);
+		usleep(data_repeat * 1000);
+	}
 }
+#ifdef _WIN32
+	buffer_sent =+ link_socket_write_win32(sock, buf, to);
+#else
+	buffer_sent =+ link_socket_write_udp_posix(sock, buf, to);
+#endif
+	return buffer_sent;
+}\
 
 /* write a TCP or UDP packet to link */
+
 static inline int
 link_socket_write(struct link_socket *sock,
                   struct buffer *buf,
\ No newline at end of file
